{"version":3,"file":"ort.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/./node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.naturalHeight;\n                let width = image.naturalWidth;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                canvas.width = width;\n                canvas.height = height;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        var _a, _b;\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (((_a = options.norm) === null || _a === void 0 ? void 0 : _a.mean) !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (((_b = options.norm) === null || _b === void 0 ? void 0 : _b.bias) !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","var _scriptDir,t=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(t){function n(){return E.buffer!=D&&z(E.buffer),j}function e(){return E.buffer!=D&&z(E.buffer),F}function r(){return E.buffer!=D&&z(E.buffer),U}function i(){return E.buffer!=D&&z(E.buffer),Y}function a(){return E.buffer!=D&&z(E.buffer),I}var u,o,c;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,n){o=t,c=n}));var f,s,l,p,h,m,d=Object.assign({},u),y=\"./this.program\",b=(t,n)=>{throw n},g=\"object\"==typeof window,_=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=u.ENVIRONMENT_IS_PTHREAD||!1,T=\"\";function O(t){return u.locateFile?u.locateFile(t,T):T+t}if(v){let t;T=_?require(\"path\").dirname(T)+\"/\":__dirname+\"/\",m=()=>{h||(p=require(\"fs\"),h=require(\"path\"))},f=function(t,n){return m(),t=h.normalize(t),p.readFileSync(t,n?void 0:\"utf8\")},l=t=>((t=f(t,!0)).buffer||(t=new Uint8Array(t)),t),s=(t,n,e)=>{m(),t=h.normalize(t),p.readFile(t,(function(t,r){t?e(t):n(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof ot))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),b=(t,n)=>{if(J())throw process.exitCode=t,n;n instanceof ot||x(\"exiting due to exception: \"+n),process.exit(t)},u.inspect=function(){return\"[Emscripten Module object]\"};try{t=require(\"worker_threads\")}catch(t){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}global.Worker=t.Worker}else(g||_)&&(_?T=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\"blob:\")?T.substr(0,T.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=t=>{var n=new XMLHttpRequest;return n.open(\"GET\",t,!1),n.send(null),n.responseText},_&&(l=t=>{var n=new XMLHttpRequest;return n.open(\"GET\",t,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),s=(t,n,e)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):e()},r.onerror=e,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),A=console.warn.bind(console);v&&(m(),S=t=>p.writeSync(1,t+\"\\n\"),A=t=>p.writeSync(2,t+\"\\n\"));var M,C=u.print||S,x=u.printErr||A;Object.assign(u,d),d=null,u.thisProgram&&(y=u.thisProgram),u.quit&&(b=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&rt(\"no native wasm support detected\");var E,k,D,j,F,U,Y,I,W=!1,P=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function H(t,n,e){var r=(n>>>=0)+e;for(e=n;t[e]&&!(e>=r);)++e;if(16<e-n&&t.buffer&&P)return P.decode(t.buffer instanceof SharedArrayBuffer?t.slice(n,e):t.subarray(n,e));for(r=\"\";n<e;){var i=t[n++];if(128&i){var a=63&t[n++];if(192==(224&i))r+=String.fromCharCode((31&i)<<6|a);else{var u=63&t[n++];65536>(i=224==(240&i)?(15&i)<<12|a<<6|u:(7&i)<<18|a<<12|u<<6|63&t[n++])?r+=String.fromCharCode(i):(i-=65536,r+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else r+=String.fromCharCode(i)}return r}function q(t,n){return(t>>>=0)?H(e(),t,n):\"\"}function B(t,n,e,r){if(!(0<r))return 0;var i=e>>>=0;r=e+r-1;for(var a=0;a<t.length;++a){var u=t.charCodeAt(a);if(55296<=u&&57343>=u&&(u=65536+((1023&u)<<10)|1023&t.charCodeAt(++a)),127>=u){if(e>=r)break;n[e++>>>0]=u}else{if(2047>=u){if(e+1>=r)break;n[e++>>>0]=192|u>>6}else{if(65535>=u){if(e+2>=r)break;n[e++>>>0]=224|u>>12}else{if(e+3>=r)break;n[e++>>>0]=240|u>>18,n[e++>>>0]=128|u>>12&63}n[e++>>>0]=128|u>>6&63}n[e++>>>0]=128|63&u}}return n[e>>>0]=0,e-i}function G(t){for(var n=0,e=0;e<t.length;++e){var r=t.charCodeAt(e);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++e):n+=3}return n}function z(t){D=t,u.HEAP8=j=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=U=new Int32Array(t),u.HEAPU8=F=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=Y=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=I=new Float64Array(t)}w&&(D=u.buffer);var N=u.INITIAL_MEMORY||16777216;if(w)E=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)E=u.wasmMemory;else if(!((E=new WebAssembly.Memory({initial:N/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");E&&(D=E.buffer),N=D.byteLength,z(D);var V,L=[],X=[],Z=[],$=[];function J(){return R||!1}function Q(){var t=u.preRun.shift();L.unshift(t)}var K,tt=0,nt=null,et=null;function rt(t){throw w?postMessage({cmd:\"onAbort\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\"Aborted(\"+t+\")\"),W=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),c(t),t}function it(){return K.startsWith(\"data:application/octet-stream;base64,\")}function at(){var t=K;try{if(t==K&&M)return new Uint8Array(M);if(l)return l(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){rt(t)}}K=\"ort-wasm-threaded.wasm\",it()||(K=O(K));var ut={};function ot(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function ct(t){(t=pt.Vb[t])||rt(),pt.mc(t)}function ft(t){var n=pt.Cc();if(!n)return 6;pt.ac.push(n),pt.Vb[t.Ub]=n,n.Ub=t.Ub;var e={cmd:\"run\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return n.$b=()=>{e.time=performance.now(),n.postMessage(e,t.Nc)},n.loaded&&(n.$b(),delete n.$b),0}function st(t){if(w)return Vt(1,1,t);J()||(pt.oc(),u.onExit&&u.onExit(t),W=!0),b(t,new ot(t))}function lt(t,n){if(!n&&w)throw dt(t),\"unwind\";J()||w||(bn(),ht(Z),yn(0),en[1].length&&rn(1,10),en[2].length&&rn(2,10),pt.oc()),st(t)}var pt={Yb:[],ac:[],qc:[],Vb:{},fc:function(){w&&pt.Ec()},Pc:function(){},Ec:function(){pt.receiveObjectTransfer=pt.Gc,pt.threadInitTLS=pt.pc,pt.setExitStatus=pt.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(pt.Vb))pt.mc(t);for(t of pt.Yb)t.terminate();pt.Yb=[]},mc:function(t){var n=t.Ub;delete pt.Vb[n],pt.Yb.push(t),pt.ac.splice(pt.ac.indexOf(t),1),t.Ub=0,Tn(n)},Gc:function(){},pc:function(){pt.qc.forEach((t=>t()))},Fc:function(t,n){t.onmessage=e=>{var r=(e=e.data).cmd;if(t.Ub&&(pt.Bc=t.Ub),e.targetThread&&e.targetThread!=hn()){var i=pt.Vb[e.Qc];i?i.postMessage(e,e.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+e.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ht(e.queue):\"spawnThread\"===r?ft(e):\"cleanupThread\"===r?ct(e.thread):\"killThread\"===r?(e=e.thread,r=pt.Vb[e],delete pt.Vb[e],r.terminate(),Tn(e),pt.ac.splice(pt.ac.indexOf(r),1),r.Ub=0):\"cancelThread\"===r?pt.Vb[e.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(t.loaded=!0,n&&n(t),t.$b&&(t.$b(),delete t.$b)):\"print\"===r?C(\"Thread \"+e.threadId+\": \"+e.text):\"printErr\"===r?x(\"Thread \"+e.threadId+\": \"+e.text):\"alert\"===r?alert(\"Thread \"+e.threadId+\": \"+e.text):\"setimmediate\"===e.target?t.postMessage(e):\"onAbort\"===r?u.onAbort&&u.onAbort(e.arg):r&&x(\"worker sent an unknown command \"+r);pt.Bc=void 0},t.onerror=t=>{throw x(\"worker sent an error! \"+t.filename+\":\"+t.lineno+\": \"+t.message),t},v&&(t.on(\"message\",(function(n){t.onmessage({data:n})})),t.on(\"error\",(function(n){t.onerror(n)})),t.on(\"detachedExit\",(function(){}))),t.postMessage({cmd:\"load\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:E,wasmModule:k})},yc:function(){var t=O(\"ort-wasm-threaded.worker.js\");pt.Yb.push(new Worker(t))},Cc:function(){return 0==pt.Yb.length&&(pt.yc(),pt.Fc(pt.Yb[0])),pt.Yb.pop()}};function ht(t){for(;0<t.length;)t.shift()(u)}function mt(t){var n=Mn();return t=t(),Cn(n),t}function dt(t){if(w)return Vt(2,0,t);try{lt(t)}catch(t){t instanceof ot||\"unwind\"==t||b(1,t)}}u.PThread=pt,u.establishStackSpace=function(){var t=hn(),n=r()[t+44>>2>>>0];t=r()[t+48>>2>>>0],An(n,n-t),Cn(n)};var yt=[];function bt(t){var n=yt[t];return n||(t>=yt.length&&(yt.length=t+1),yt[t]=n=V.get(t)),n}u.invokeEntryPoint=function(t,n){t=bt(t)(n),J()?pt.nc(t):On(t)};var gt,_t,vt=[],wt=0,Tt=0;function Ot(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){r()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,n()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=n()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,n()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=n()[this.Sb+13>>0>>>0]},this.fc=function(t,n){this.cc(0),this.xc(t),this.wc(n),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(r(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(r(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(En(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function St(t){return dn(new Ot(t).Sb)}function At(t,n,e,r){return w?Vt(3,1,t,n,e,r):Mt(t,n,e,r)}function Mt(t,n,e,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var i=[];return w&&0===i.length?At(t,n,e,r):(t={Ic:e,Ub:t,zc:r,Nc:i},w?(t.Oc=\"spawnThread\",postMessage(t,i),0):ft(t))}function Ct(t,n,e){return w?Vt(4,1,t,n,e):0}function xt(t,n){if(w)return Vt(5,1,t,n)}function Rt(t,n){if(w)return Vt(6,1,t,n)}function Et(t,n,e){if(w)return Vt(7,1,t,n,e)}function kt(t,n,e){return w?Vt(8,1,t,n,e):0}function Dt(t,n){if(w)return Vt(9,1,t,n)}function jt(t,n,e){if(w)return Vt(10,1,t,n,e)}function Ft(t,n,e,r){if(w)return Vt(11,1,t,n,e,r)}function Ut(t,n,e,r){if(w)return Vt(12,1,t,n,e,r)}function Yt(t,n,e,r){if(w)return Vt(13,1,t,n,e,r)}function It(t){if(w)return Vt(14,1,t)}function Wt(t,n){if(w)return Vt(15,1,t,n)}function Pt(t,n,e){if(w)return Vt(16,1,t,n,e)}function Ht(t){Atomics.store(r(),t>>2,1),hn()&&wn(t),Atomics.compareExchange(r(),t>>2,1,0)}function qt(t){return i()[t>>>2]+4294967296*r()[t+4>>>2]}function Bt(t,n,e,r,i,a){return w?Vt(17,1,t,n,e,r,i,a):-52}function Gt(t,n,e,r,i,a){if(w)return Vt(18,1,t,n,e,r,i,a)}function zt(t){var e=G(t)+1,r=mn(e);return r&&B(t,n(),r,e),r}function Nt(t,n,e){function a(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:\"GMT\"}if(w)return Vt(19,1,t,n,e);var u=(new Date).getFullYear(),o=new Date(u,0,1),c=new Date(u,6,1);u=o.getTimezoneOffset();var f=c.getTimezoneOffset(),s=Math.max(u,f);r()[t>>2>>>0]=60*s,r()[n>>2>>>0]=Number(u!=f),t=a(o),n=a(c),t=zt(t),n=zt(n),f<u?(i()[e>>2>>>0]=t,i()[e+4>>2>>>0]=n):(i()[e>>2>>>0]=n,i()[e+4>>2>>>0]=t)}function Vt(t,n){var e=arguments.length-2,r=arguments;return mt((()=>{for(var i=xn(8*e),u=i>>3,o=0;o<e;o++){var c=r[2+o];a()[u+o>>>0]=c}return vn(t,e,i,n)}))}u.executeNotifiedProxyingQueue=Ht,_t=v?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:w?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var Lt,Xt=[],Zt={};function $t(){if(!Lt){var t,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:y||\"./this.program\"};for(t in Zt)void 0===Zt[t]?delete n[t]:n[t]=Zt[t];var e=[];for(t in n)e.push(t+\"=\"+n[t]);Lt=e}return Lt}function Jt(t,e){if(w)return Vt(20,1,t,e);var r=0;return $t().forEach((function(a,u){var o=e+r;for(u=i()[t+4*u>>2>>>0]=o,o=0;o<a.length;++o)n()[u++>>0>>>0]=a.charCodeAt(o);n()[u>>0>>>0]=0,r+=a.length+1})),0}function Qt(t,n){if(w)return Vt(21,1,t,n);var e=$t();i()[t>>2>>>0]=e.length;var r=0;return e.forEach((function(t){r+=t.length+1})),i()[n>>2>>>0]=r,0}function Kt(t){return w?Vt(22,1,t):52}function tn(t,n,e,r){return w?Vt(23,1,t,n,e,r):52}function nn(t,n,e,r,i){return w?Vt(24,1,t,n,e,r,i):70}var en=[null,[],[]];function rn(t,n){var e=en[t];0===n||10===n?((1===t?C:x)(H(e,0)),e.length=0):e.push(n)}function an(t,n,r,a){if(w)return Vt(25,1,t,n,r,a);for(var u=0,o=0;o<r;o++){var c=i()[n>>2>>>0],f=i()[n+4>>2>>>0];n+=8;for(var s=0;s<f;s++)rn(t,e()[c+s>>>0]);u+=f}return i()[a>>2>>>0]=u,0}var un=0;function on(t){return 0==t%4&&(0!=t%100||0==t%400)}var cn=[31,29,31,30,31,30,31,31,30,31,30,31],fn=[31,28,31,30,31,30,31,31,30,31,30,31];function sn(t,e,i,a){function u(t,n,e){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<n;)t=e[0]+t;return t}function o(t,n){return u(t,n,\"0\")}function c(t,n){function e(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=e(t.getFullYear()-n.getFullYear()))&&0===(r=e(t.getMonth()-n.getMonth()))&&(r=e(t.getDate()-n.getDate())),r}function f(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function s(t){var n=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<n;){var e=t.getMonth(),r=(on(t.getFullYear())?cn:fn)[e];if(!(n>r-t.getDate())){t.setDate(t.getDate()+n);break}n-=r-t.getDate()+1,t.setDate(1),11>e?t.setMonth(e+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return e=new Date(t.getFullYear()+1,0,4),n=f(new Date(t.getFullYear(),0,4)),e=f(e),0>=c(n,t)?0>=c(e,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var l=r()[a+40>>2>>>0];for(var p in a={Lc:r()[a>>2>>>0],Kc:r()[a+4>>2>>>0],dc:r()[a+8>>2>>>0],jc:r()[a+12>>2>>>0],ec:r()[a+16>>2>>>0],Xb:r()[a+20>>2>>>0],Tb:r()[a+24>>2>>>0],Wb:r()[a+28>>2>>>0],Rc:r()[a+32>>2>>>0],Jc:r()[a+36>>2>>>0],Mc:l?q(l):\"\"},i=q(i),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})i=i.replace(new RegExp(p,\"g\"),l[p]);var h=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(t){return h[t.Tb].substring(0,3)},\"%A\":function(t){return h[t.Tb]},\"%b\":function(t){return m[t.ec].substring(0,3)},\"%B\":function(t){return m[t.ec]},\"%C\":function(t){return o((t.Xb+1900)/100|0,2)},\"%d\":function(t){return o(t.jc,2)},\"%e\":function(t){return u(t.jc,2,\" \")},\"%g\":function(t){return s(t).toString().substring(2)},\"%G\":function(t){return s(t)},\"%H\":function(t){return o(t.dc,2)},\"%I\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),o(t,2)},\"%j\":function(t){for(var n=0,e=0;e<=t.ec-1;n+=(on(t.Xb+1900)?cn:fn)[e++]);return o(t.jc+n,3)},\"%m\":function(t){return o(t.ec+1,2)},\"%M\":function(t){return o(t.Kc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(t){return 0<=t.dc&&12>t.dc?\"AM\":\"PM\"},\"%S\":function(t){return o(t.Lc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(t){return t.Tb||7},\"%U\":function(t){return o(Math.floor((t.Wb+7-t.Tb)/7),2)},\"%V\":function(t){var n=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&n++,n)53==n&&(4==(e=(t.Tb+371-t.Wb)%7)||3==e&&on(t.Xb)||(n=1));else{n=52;var e=(t.Tb+7-t.Wb-1)%7;(4==e||5==e&&on(t.Xb%400-1))&&n++}return o(n,2)},\"%w\":function(t){return t.Tb},\"%W\":function(t){return o(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\"%y\":function(t){return(t.Xb+1900).toString().substring(2)},\"%Y\":function(t){return t.Xb+1900},\"%z\":function(t){var n=0<=(t=t.Jc);return t=Math.abs(t)/60,(n?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.Mc},\"%%\":function(){return\"%\"}},i=i.replace(/%%/g,\"\\0\\0\"),l)i.includes(p)&&(i=i.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(t){var n=Array(G(t)+1);return B(t,n,0,n.length),n}(i=i.replace(/\\0\\0/g,\"%\")),p.length>e?0:(function(t,e){n().set(t,e>>>0)}(p,t),p.length-1)}pt.fc();var ln=[null,st,dt,At,Ct,xt,Rt,Et,kt,Dt,jt,Ft,Ut,Yt,It,Wt,Pt,Bt,Gt,Nt,Jt,Qt,Kt,tn,nn,an],pn={b:function(t){return mn(t+24)+24},n:function(t){return(t=new Ot(t)).uc()||(t.hc(!0),wt--),t.ic(!1),vt.push(t),t.sc(),t.vc()},ma:function(t){throw x(\"Unexpected exception thrown, this is not properly supported - aborting\"),W=!0,t},x:function(){Sn(0);var t=vt.pop();if(t.Hc()&&!t.kc()){var n=t.Dc();n&&bt(n)(t.Zb),St(t.Zb)}Tt=0},e:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},l:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},h:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},t:St,M:function(){var t=vt.pop();t||rt(\"no exception to throw\");var n=t.Zb;throw t.kc()||(vt.push(t),t.ic(!0),t.hc(!1),wt++),Tt=n,n},c:function(t,n,e){throw new Ot(t).fc(n,e),Tt=t,wt++,t},pa:function(){return wt},Fa:function(t){gn(t,!_,1,!g),pt.pc()},T:function(t){w?postMessage({cmd:\"cleanupThread\",thread:t}):ct(t)},xa:Mt,j:function(t){throw Tt||(Tt=t),t},H:Ct,Ma:xt,ua:Rt,wa:Et,oa:kt,Ka:Dt,Ca:jt,Ja:Ft,V:Ut,va:Yt,sa:It,La:Wt,ta:Pt,Ta:function(){},X:function(){rt(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ua:function(){rt(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,n,e,r){if(t==n)setTimeout((()=>Ht(r)));else if(w)postMessage({targetThread:t,cmd:\"processProxyingQueue\",queue:r});else{if(!(t=pt.Vb[t]))return;t.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,n){t=new Date(1e3*qt(t)),r()[n>>2>>>0]=t.getUTCSeconds(),r()[n+4>>2>>>0]=t.getUTCMinutes(),r()[n+8>>2>>>0]=t.getUTCHours(),r()[n+12>>2>>>0]=t.getUTCDate(),r()[n+16>>2>>>0]=t.getUTCMonth(),r()[n+20>>2>>>0]=t.getUTCFullYear()-1900,r()[n+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=t},Qa:function(t,n){t=new Date(1e3*qt(t)),r()[n>>2>>>0]=t.getSeconds(),r()[n+4>>2>>>0]=t.getMinutes(),r()[n+8>>2>>>0]=t.getHours(),r()[n+12>>2>>>0]=t.getDate(),r()[n+16>>2>>>0]=t.getMonth(),r()[n+20>>2>>>0]=t.getFullYear()-1900,r()[n+24>>2>>>0]=t.getDay();var e=new Date(t.getFullYear(),0,1),i=(t.getTime()-e.getTime())/864e5|0;r()[n+28>>2>>>0]=i,r()[n+36>>2>>>0]=-60*t.getTimezoneOffset(),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(i!=(e=e.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(e,i)),r()[n+32>>2>>>0]=t},Ra:function(t){var n=new Date(r()[t+20>>2>>>0]+1900,r()[t+16>>2>>>0],r()[t+12>>2>>>0],r()[t+8>>2>>>0],r()[t+4>>2>>>0],r()[t>>2>>>0],0),e=r()[t+32>>2>>>0],i=n.getTimezoneOffset(),a=new Date(n.getFullYear(),0,1),u=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),c=Math.min(o,u);return 0>e?r()[t+32>>2>>>0]=Number(u!=o&&c==i):0<e!=(c==i)&&(u=Math.max(o,u),n.setTime(n.getTime()+6e4*((0<e?c:u)-i))),r()[t+24>>2>>>0]=n.getDay(),e=(n.getTime()-a.getTime())/864e5|0,r()[t+28>>2>>>0]=e,r()[t>>2>>>0]=n.getSeconds(),r()[t+4>>2>>>0]=n.getMinutes(),r()[t+8>>2>>>0]=n.getHours(),r()[t+12>>2>>>0]=n.getDate(),r()[t+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(n,e,r){t.Ac||(t.Ac=!0,Nt(n,e,r))},y:function(){rt(\"\")},U:function(){if(!v&&!_){var t=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";gt||(gt={}),gt[t]||(gt[t]=1,v&&(t=\"warning: \"+t),x(t))}},ra:function(){return 4294901760},B:_t,Ia:function(t,n,r){e().copyWithin(t>>>0,n>>>0,n+r>>>0)},F:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},Da:function(t,n,e){Xt.length=n,e>>=3;for(var r=0;r<n;r++)Xt[r]=a()[e+r>>>0];return(0>t?ut[-t-1]:ln[t]).apply(null,Xt)},qa:function(t){var n=e().length;if((t>>>=0)<=n||4294901760<t)return!1;for(var r=1;4>=r;r*=2){var i=n*(1+.2/r);i=Math.min(i,t+100663296);var a=Math;i=Math.max(t,i),a=a.min.call(a,4294901760,i+(65536-i%65536)%65536);t:{try{E.grow(a-D.byteLength+65535>>>16),z(E.buffer);var u=1;break t}catch(t){}u=void 0}if(u)return!0}return!1},Na:function(){throw\"unwind\"},Ga:Jt,Ha:Qt,J:lt,I:Kt,S:tn,ga:nn,R:an,d:function(){return un},na:function t(e,r){t.lc||(t.lc=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(v)try{var n=require(\"crypto\");return()=>n.randomBytes(1)[0]}catch(t){}return()=>rt(\"randomDevice\")}());for(var i=0;i<r;i++)n()[e+i>>0>>>0]=t.lc();return 0},ia:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},ja:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},K:function(t){var n=Mn();try{return bt(t)()}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},f:function(t,n){var e=Mn();try{return bt(t)(n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},P:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},Q:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},k:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},p:function(t,n,e,r){var i=Mn();try{return bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},q:function(t,n,e,r,i){var a=Mn();try{return bt(t)(n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},N:function(t,n,e,r,i,a){var u=Mn();try{return bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},s:function(t,n,e,r,i,a){var u=Mn();try{return bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},w:function(t,n,e,r,i,a,u){var o=Mn();try{return bt(t)(n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},L:function(t,n,e,r,i,a,u,o){var c=Mn();try{return bt(t)(n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},E:function(t,n,e,r,i,a,u,o,c,f,s,l){var p=Mn();try{return bt(t)(n,e,r,i,a,u,o,c,f,s,l)}catch(t){if(Cn(p),t!==t+0)throw t;Sn(1,0)}},aa:function(t,n,e,r,i,a,u,o){var c=Mn();try{return Pn(t,n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},_:function(t,n,e,r,i,a,u){var o=Mn();try{return Dn(t,n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},Z:function(t,n,e,r,i){var a=Mn();try{return Hn(t,n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},ca:function(t,n,e,r){var i=Mn();try{return In(t,n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},$:function(t){var n=Mn();try{return kn(t)}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},ba:function(t,n){var e=Mn();try{return Wn(t,n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},Y:function(t,n,e){var r=Mn();try{return jn(t,n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},g:function(t){var n=Mn();try{bt(t)()}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},r:function(t,n){var e=Mn();try{bt(t)(n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},i:function(t,n,e){var r=Mn();try{bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},ha:function(t,n,e,r){var i=Mn();try{bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},m:function(t,n,e,r){var i=Mn();try{bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},v:function(t,n,e,r,i){var a=Mn();try{bt(t)(n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},u:function(t,n,e,r,i,a){var u=Mn();try{bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},O:function(t,n,e,r,i,a,u){var o=Mn();try{bt(t)(n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},A:function(t,n,e,r,i,a,u,o){var c=Mn();try{bt(t)(n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},ka:function(t,n,e,r,i,a,u,o,c){var f=Mn();try{bt(t)(n,e,r,i,a,u,o,c)}catch(t){if(Cn(f),t!==t+0)throw t;Sn(1,0)}},C:function(t,n,e,r,i,a,u,o,c,f,s){var l=Mn();try{bt(t)(n,e,r,i,a,u,o,c,f,s)}catch(t){if(Cn(l),t!==t+0)throw t;Sn(1,0)}},D:function(t,n,e,r,i,a,u,o,c,f,s,l,p,h,m,d){var y=Mn();try{bt(t)(n,e,r,i,a,u,o,c,f,s,l,p,h,m,d)}catch(t){if(Cn(y),t!==t+0)throw t;Sn(1,0)}},fa:function(t,n,e,r,i,a,u,o){var c=Mn();try{Fn(t,n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},da:function(t,n,e,r,i,a,u,o,c,f,s,l){var p=Mn();try{Yn(t,n,e,r,i,a,u,o,c,f,s,l)}catch(t){if(Cn(p),t!==t+0)throw t;Sn(1,0)}},ea:function(t,n,e,r,i,a){var u=Mn();try{Un(t,n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},o:function(t){return t},a:E||u.wasmMemory,G:function(t){un=t},la:sn,z:function(t,n,e,r){return sn(t,n,e,r)}};!function(){function t(t,n){u.asm=t.exports,pt.qc.push(u.asm.sb),V=u.asm.ub,X.unshift(u.asm.Va),k=n,w||(tt--,u.monitorRunDependencies&&u.monitorRunDependencies(tt),0==tt&&(null!==nt&&(clearInterval(nt),nt=null),et&&(t=et,et=null,t())))}function n(n){t(n.instance,n.module)}function e(t){return function(){if(!M&&(g||_)){if(\"function\"==typeof fetch&&!K.startsWith(\"file://\"))return fetch(K,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at '\"+K+\"'\";return t.arrayBuffer()})).catch((function(){return at()}));if(s)return new Promise((function(t,n){s(K,(function(n){t(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return at()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\"failed to asynchronously prepare wasm: \"+t),rt(t)}))}var r={a:pn};if(w||(tt++,u.monitorRunDependencies&&u.monitorRunDependencies(tt)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\"Module.instantiateWasm callback failed with error: \"+t),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||it()||K.startsWith(\"file://\")||v||\"function\"!=typeof fetch?e(n):fetch(K,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(n,(function(t){return x(\"wasm streaming compile failed: \"+t),x(\"falling back to ArrayBuffer instantiation\"),e(n)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var hn=u._pthread_self=function(){return(hn=u._pthread_self=u.asm.ob).apply(null,arguments)},mn=u._malloc=function(){return(mn=u._malloc=u.asm.pb).apply(null,arguments)},dn=u._free=function(){return(dn=u._free=u.asm.qb).apply(null,arguments)},yn=u._fflush=function(){return(yn=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var bn=u.___funcs_on_exit=function(){return(bn=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},gn=u.__emscripten_thread_init=function(){return(gn=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var _n,vn=u._emscripten_run_in_main_runtime_thread_js=function(){return(vn=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},wn=u.__emscripten_proxy_execute_task_queue=function(){return(wn=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Tn=u.__emscripten_thread_free_data=function(){return(Tn=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},On=u.__emscripten_thread_exit=function(){return(On=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Sn=u._setThrew=function(){return(Sn=u._setThrew=u.asm.Bb).apply(null,arguments)},An=u._emscripten_stack_set_limits=function(){return(An=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Mn=u.stackSave=function(){return(Mn=u.stackSave=u.asm.Db).apply(null,arguments)},Cn=u.stackRestore=function(){return(Cn=u.stackRestore=u.asm.Eb).apply(null,arguments)},xn=u.stackAlloc=function(){return(xn=u.stackAlloc=u.asm.Fb).apply(null,arguments)},Rn=u.___cxa_can_catch=function(){return(Rn=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},En=u.___cxa_is_pointer_type=function(){return(En=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},kn=u.dynCall_j=function(){return(kn=u.dynCall_j=u.asm.Ib).apply(null,arguments)},Dn=u.dynCall_iiiiij=function(){return(Dn=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},jn=u.dynCall_jii=function(){return(jn=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Fn=u.dynCall_viiiiij=function(){return(Fn=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Un=u.dynCall_vjji=function(){return(Un=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Yn=u.dynCall_viiijjjii=function(){return(Yn=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},In=u.dynCall_iij=function(){return(In=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},Wn=u.dynCall_ji=function(){return(Wn=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},Pn=u.dynCall_iiiiiij=function(){return(Pn=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Hn=u.dynCall_iiij=function(){return(Hn=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function qn(){function t(){if(!_n&&(_n=!0,u.calledRun=!0,!W)&&(w||ht(X),o(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!w)){if(u.postRun)for(\"function\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();$.unshift(t)}ht($)}}if(!(0<tt))if(w)o(u),w||ht(X),postMessage({cmd:\"loaded\"});else{if(u.preRun)for(\"function\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)Q();ht(L),0<tt||(u.setStatus?(u.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){u.setStatus(\"\")}),1),t()}),1)):t())}}if(u.UTF8ToString=q,u.stringToUTF8=function(t,n,r){return B(t,e(),n,r)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=J,u.wasmMemory=E,u.stackSave=Mn,u.stackRestore=Cn,u.stackAlloc=xn,u.ExitStatus=ot,u.PThread=pt,et=function t(){_n||qn(),_n||(et=t)},u.preInit)for(\"function\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return qn(),t.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t:\"function\"==typeof define&&define.amd?define([],(function(){return t})):\"object\"==typeof exports&&(exports.ortWasmThreaded=t);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar d;d||(d=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,ba;d.ready=new Promise(function(a,b){aa=a;ba=b});var ca=Object.assign({},d),da=\"./this.program\",ea=(a,b)=>{throw b;},fa=\"object\"==typeof window,m=\"function\"==typeof importScripts,p=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,q=\"\",ha,r,v,fs,y,ia;\r\nif(p)q=m?require(\"path\").dirname(q)+\"/\":__dirname+\"/\",ia=()=>{y||(fs=require(\"fs\"),y=require(\"path\"))},ha=function(a,b){ia();a=y.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")},v=a=>{a=ha(a,!0);a.buffer||(a=new Uint8Array(a));return a},r=(a,b,c)=>{ia();a=y.normalize(a);fs.readFile(a,function(e,f){e?c(e):b(f.buffer)})},1<process.argv.length&&(da=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){if(!(a instanceof ja))throw a;}),process.on(\"unhandledRejection\",\r\nfunction(a){throw a;}),ea=(a,b)=>{if(noExitRuntime||0<ka)throw process.exitCode=a,b;b instanceof ja||z(\"exiting due to exception: \"+b);process.exit(a)},d.inspect=function(){return\"[Emscripten Module object]\"};else if(fa||m)m?q=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(q=document.currentScript.src),_scriptDir&&(q=_scriptDir),0!==q.indexOf(\"blob:\")?q=q.substr(0,q.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):q=\"\",ha=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);\r\nreturn b.responseText},m&&(v=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),r=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)};var la=d.print||console.log.bind(console),z=d.printErr||console.warn.bind(console);Object.assign(d,ca);ca=null;d.thisProgram&&(da=d.thisProgram);d.quit&&(ea=d.quit);\r\nvar A;d.wasmBinary&&(A=d.wasmBinary);var noExitRuntime=d.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var ma,D=!1,na=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction oa(a,b,c){b>>>=0;var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&na)return na.decode(a.subarray(b,c));for(e=\"\";b<c;){var f=a[b++];if(f&128){var h=a[b++]&63;if(192==(f&224))e+=String.fromCharCode((f&31)<<6|h);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|h<<6|k:(f&7)<<18|h<<12|k<<6|a[b++]&63;65536>f?e+=String.fromCharCode(f):(f-=65536,e+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else e+=String.fromCharCode(f)}return e}function pa(a,b){return(a>>>=0)?oa(G,a,b):\"\"}\r\nfunction qa(a,b,c,e){c>>>=0;if(!(0<e))return 0;var f=c;e=c+e-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=e)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=e)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=e)break;b[c++>>>0]=224|k>>12}else{if(c+3>=e)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-f}\r\nfunction ra(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++c):b+=3}return b}var sa,H,G,I,J;function ta(){var a=ma.buffer;sa=a;d.HEAP8=H=new Int8Array(a);d.HEAP16=new Int16Array(a);d.HEAP32=I=new Int32Array(a);d.HEAPU8=G=new Uint8Array(a);d.HEAPU16=new Uint16Array(a);d.HEAPU32=J=new Uint32Array(a);d.HEAPF32=new Float32Array(a);d.HEAPF64=new Float64Array(a)}var ua,va=[],wa=[],xa=[],ya=[],ka=0;\r\nfunction za(){var a=d.preRun.shift();va.unshift(a)}var K=0,Aa=null,L=null;function B(a){if(d.onAbort)d.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);D=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}function Ba(){return N.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!Ba()){var Ca=N;N=d.locateFile?d.locateFile(Ca,q):q+Ca}\r\nfunction Da(){var a=N;try{if(a==N&&A)return new Uint8Array(A);if(v)return v(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\r\nfunction Ea(){if(!A&&(fa||m)){if(\"function\"==typeof fetch&&!N.startsWith(\"file://\"))return fetch(N,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+N+\"'\";return a.arrayBuffer()}).catch(function(){return Da()});if(r)return new Promise(function(a,b){r(N,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Da()})}function ja(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction O(a){for(;0<a.length;)a.shift()(d)}var P=[],Q=0,R=0;\r\nfunction S(a){this.Db=a;this.zb=a-24;this.Ub=function(b){J[this.zb+4>>2>>>0]=b};this.Eb=function(){return J[this.zb+4>>2>>>0]};this.Sb=function(b){J[this.zb+8>>2>>>0]=b};this.Wb=function(){return J[this.zb+8>>2>>>0]};this.Tb=function(){I[this.zb>>2>>>0]=0};this.Ib=function(b){H[this.zb+12>>0>>>0]=b?1:0};this.Pb=function(){return 0!=H[this.zb+12>>0>>>0]};this.Jb=function(b){H[this.zb+13>>0>>>0]=b?1:0};this.Lb=function(){return 0!=H[this.zb+13>>0>>>0]};this.Rb=function(b,c){this.Fb(0);this.Ub(b);this.Sb(c);\r\nthis.Tb();this.Ib(!1);this.Jb(!1)};this.Nb=function(){I[this.zb>>2>>>0]+=1};this.Xb=function(){var b=I[this.zb>>2>>>0];I[this.zb>>2>>>0]=b-1;return 1===b};this.Fb=function(b){J[this.zb+16>>2>>>0]=b};this.Ob=function(){return J[this.zb+16>>2>>>0]};this.Qb=function(){if(Fa(this.Eb()))return J[this.Db>>2>>>0];var b=this.Ob();return 0!==b?b:this.Db}}function Ga(a){return Ha((new S(a)).zb)}var T=[];function U(a){var b=T[a];b||(a>=T.length&&(T.length=a+1),T[a]=b=ua.get(a));return b}\r\nfunction Ia(a){var b=ra(a)+1,c=Ja(b);c&&qa(a,H,c,b);return c}function Ka(a,b,c){function e(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var f=(new Date).getFullYear(),h=new Date(f,0,1),k=new Date(f,6,1);f=h.getTimezoneOffset();var l=k.getTimezoneOffset();I[a>>2>>>0]=60*Math.max(f,l);I[b>>2>>>0]=Number(f!=l);a=e(h);b=e(k);a=Ia(a);b=Ia(b);l<f?(J[c>>2>>>0]=a,J[c+4>>2>>>0]=b):(J[c>>2>>>0]=b,J[c+4>>2>>>0]=a)}function La(a,b,c){La.Vb||(La.Vb=!0,Ka(a,b,c))}var Ma={};\r\nfunction Na(){if(!Oa){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Ma)void 0===Ma[b]?delete a[b]:a[b]=Ma[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Oa=c}return Oa}var Oa,Pa=[null,[],[]];function Qa(a,b){var c=Pa[a];0===b||10===b?((1===a?la:z)(oa(c,0)),c.length=0):c.push(b)}var V=0;\r\nfunction Ra(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return()=>{crypto.getRandomValues(a);return a[0]}}if(p)try{var b=require(\"crypto\");return()=>b.randomBytes(1)[0]}catch(c){}return()=>B(\"randomDevice\")}function W(a,b){W.Mb||(W.Mb=Ra());for(var c=0;c<b;c++)H[a+c>>0>>>0]=W.Mb();return 0}function Sa(a){return 0===a%4&&(0!==a%100||0===a%400)}var Ta=[31,29,31,30,31,30,31,31,30,31,30,31],Ua=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Va(a){var b=Array(ra(a)+1);qa(a,b,0,b.length);return b}\r\nfunction Wa(a,b,c,e){function f(g,u,w){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<u;)g=w[0]+g;return g}function h(g,u){return f(g,u,\"0\")}function k(g,u){function w(M){return 0>M?-1:0<M?1:0}var F;0===(F=w(g.getFullYear()-u.getFullYear()))&&0===(F=w(g.getMonth()-u.getMonth()))&&(F=w(g.getDate()-u.getDate()));return F}function l(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\r\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function n(g){var u=g.Bb;for(g=new Date((new Date(g.Cb+1900,0,1)).getTime());0<u;){var w=g.getMonth(),F=(Sa(g.getFullYear())?Ta:Ua)[w];if(u>F-g.getDate())u-=F-g.getDate()+1,g.setDate(1),11>w?g.setMonth(w+1):(g.setMonth(0),g.setFullYear(g.getFullYear()+1));else{g.setDate(g.getDate()+u);break}}w=new Date(g.getFullYear()+1,0,4);u=l(new Date(g.getFullYear(),\r\n0,4));w=l(w);return 0>=k(u,g)?0>=k(w,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var t=I[e+40>>2>>>0];e={$b:I[e>>2>>>0],Zb:I[e+4>>2>>>0],Gb:I[e+8>>2>>>0],Kb:I[e+12>>2>>>0],Hb:I[e+16>>2>>>0],Cb:I[e+20>>2>>>0],Ab:I[e+24>>2>>>0],Bb:I[e+28>>2>>>0],bc:I[e+32>>2>>>0],Yb:I[e+36>>2>>>0],ac:t?pa(t):\"\"};c=pa(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var x in t)c=c.replace(new RegExp(x,\"g\"),t[x]);var E=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),C=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":function(g){return E[g.Ab].substring(0,3)},\"%A\":function(g){return E[g.Ab]},\"%b\":function(g){return C[g.Hb].substring(0,\r\n3)},\"%B\":function(g){return C[g.Hb]},\"%C\":function(g){return h((g.Cb+1900)/100|0,2)},\"%d\":function(g){return h(g.Kb,2)},\"%e\":function(g){return f(g.Kb,2,\" \")},\"%g\":function(g){return n(g).toString().substring(2)},\"%G\":function(g){return n(g)},\"%H\":function(g){return h(g.Gb,2)},\"%I\":function(g){g=g.Gb;0==g?g=12:12<g&&(g-=12);return h(g,2)},\"%j\":function(g){for(var u=0,w=0;w<=g.Hb-1;u+=(Sa(g.Cb+1900)?Ta:Ua)[w++]);return h(g.Kb+u,3)},\"%m\":function(g){return h(g.Hb+1,2)},\"%M\":function(g){return h(g.Zb,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.Gb&&12>g.Gb?\"AM\":\"PM\"},\"%S\":function(g){return h(g.$b,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.Ab||7},\"%U\":function(g){return h(Math.floor((g.Bb+7-g.Ab)/7),2)},\"%V\":function(g){var u=Math.floor((g.Bb+7-(g.Ab+6)%7)/7);2>=(g.Ab+371-g.Bb-2)%7&&u++;if(u)53==u&&(w=(g.Ab+371-g.Bb)%7,4==w||3==w&&Sa(g.Cb)||(u=1));else{u=52;var w=(g.Ab+7-g.Bb-1)%7;(4==w||5==w&&Sa(g.Cb%400-1))&&u++}return h(u,2)},\"%w\":function(g){return g.Ab},\"%W\":function(g){return h(Math.floor((g.Bb+\r\n7-(g.Ab+6)%7)/7),2)},\"%y\":function(g){return(g.Cb+1900).toString().substring(2)},\"%Y\":function(g){return g.Cb+1900},\"%z\":function(g){g=g.Yb;var u=0<=g;g=Math.abs(g)/60;return(u?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.ac},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(x in t)c.includes(x)&&(c=c.replace(new RegExp(x,\"g\"),t[x](e)));c=c.replace(/\\0\\0/g,\"%\");x=Va(c);if(x.length>b)return 0;H.set(x,a>>>0);return x.length-1}\r\nvar Jb={a:function(a){return Ja(a+24)+24},m:function(a){a=new S(a);a.Pb()||(a.Ib(!0),Q--);a.Jb(!1);P.push(a);a.Nb();return a.Qb()},ia:function(a){z(\"Unexpected exception thrown, this is not properly supported - aborting\");D=!0;throw a;},w:function(){X(0);var a=P.pop();if(a.Xb()&&!a.Lb()){var b=a.Wb();b&&U(b)(a.Db);Ga(a.Db)}R=0},d:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];\r\nif(0===h||h===c)break;if(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},k:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];if(0===h||h===c)break;if(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},g:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];if(0===h||h===c)break;\r\nif(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},s:Ga,L:function(){var a=P.pop();a||B(\"no exception to throw\");var b=a.Db;a.Lb()||(P.push(a),a.Jb(!0),a.Ib(!1),Q++);R=b;throw b;},b:function(a,b,c){(new S(a)).Rb(b,c);R=a;Q++;throw a;},la:function(){return Q},i:function(a){R||(R=a);throw a;},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},\r\nHa:function(){},Ja:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ia:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(a,b){a=new Date(1E3*(J[a>>>2]+4294967296*I[a+4>>>2]));I[b>>2>>>0]=a.getUTCSeconds();I[b+4>>2>>>0]=a.getUTCMinutes();I[b+8>>2>>>0]=a.getUTCHours();I[b+12>>2>>>\r\n0]=a.getUTCDate();I[b+16>>2>>>0]=a.getUTCMonth();I[b+20>>2>>>0]=a.getUTCFullYear()-1900;I[b+24>>2>>>0]=a.getUTCDay();I[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},Ea:function(a,b){a=new Date(1E3*(J[a>>>2]+4294967296*I[a+4>>>2]));I[b>>2>>>0]=a.getSeconds();I[b+4>>2>>>0]=a.getMinutes();I[b+8>>2>>>0]=a.getHours();I[b+12>>2>>>0]=a.getDate();I[b+16>>2>>>0]=a.getMonth();I[b+20>>2>>>0]=a.getFullYear()-1900;I[b+24>>2>>>0]=a.getDay();var c=new Date(a.getFullYear(),0,1);I[b+\r\n28>>2>>>0]=(a.getTime()-c.getTime())/864E5|0;I[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();I[b+32>>2>>>0]=(e!=c&&a.getTimezoneOffset()==Math.min(c,e))|0},Fa:function(a){var b=new Date(I[a+20>>2>>>0]+1900,I[a+16>>2>>>0],I[a+12>>2>>>0],I[a+8>>2>>>0],I[a+4>>2>>>0],I[a>>2>>>0],0),c=I[a+32>>2>>>0],e=b.getTimezoneOffset(),f=new Date(b.getFullYear(),0,1),h=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),k=f.getTimezoneOffset(),\r\nl=Math.min(k,h);0>c?I[a+32>>2>>>0]=Number(h!=k&&l==e):0<c!=(l==e)&&(h=Math.max(k,h),b.setTime(b.getTime()+6E4*((0<c?l:h)-e)));I[a+24>>2>>>0]=b.getDay();I[a+28>>2>>>0]=(b.getTime()-f.getTime())/864E5|0;I[a>>2>>>0]=b.getSeconds();I[a+4>>2>>>0]=b.getMinutes();I[a+8>>2>>>0]=b.getHours();I[a+12>>2>>>0]=b.getDate();I[a+16>>2>>>0]=b.getMonth();return b.getTime()/1E3|0},sa:function(){return-52},ta:function(){},Ga:La,B:function(){B(\"\")},ma:function(){return 4294901760},I:p?()=>{var a=process.hrtime();return 1E3*\r\na[0]+a[1]/1E6}:()=>performance.now(),xa:function(a,b,c){G.copyWithin(a>>>0,b>>>0,b+c>>>0)},G:function(a){var b=G.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var f=Math;e=Math.max(a,e);f=f.min.call(f,4294901760,e+(65536-e%65536)%65536);a:{try{ma.grow(f-sa.byteLength+65535>>>16);ta();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},va:function(a,b){var c=0;Na().forEach(function(e,f){var h=b+c;f=J[a+4*f>>2>>>0]=h;for(h=0;h<e.length;++h)H[f++>>\r\n0>>>0]=e.charCodeAt(h);H[f>>0>>>0]=0;c+=e.length+1});return 0},wa:function(a,b){var c=Na();J[a>>2>>>0]=c.length;var e=0;c.forEach(function(f){e+=f.length+1});J[b>>2>>>0]=e;return 0},ba:function(a){noExitRuntime||0<ka||(Ya(),O(xa),Za(0),Pa[1].length&&Qa(1,10),Pa[2].length&&Qa(2,10));if(!(noExitRuntime||0<ka)){if(d.onExit)d.onExit(a);D=!0}ea(a,new ja(a))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(a,b,c,e){for(var f=0,h=0;h<c;h++){var k=J[b>>2>>>0],l=J[b+4>>\r\n2>>>0];b+=8;for(var n=0;n<l;n++)Qa(a,G[k+n>>>0]);f+=l}J[e>>2>>>0]=f;return 0},c:function(){return V},ja:W,ea:$a,fa:ab,J:bb,e:cb,N:db,O:eb,j:fb,o:gb,p:hb,M:ib,r:jb,v:kb,K:lb,D:mb,X:nb,V:ob,U:pb,Z:qb,W:rb,Y:sb,T:tb,f:ub,q:vb,h:wb,da:xb,l:yb,t:zb,u:Ab,x:Bb,z:Cb,ga:Db,A:Eb,C:Fb,aa:Gb,_:Hb,$:Ib,n:function(a){return a},F:function(a){V=a},ha:Wa,y:function(a,b,c,e){return Wa(a,b,c,e)}};\r\n(function(){function a(f){d.asm=f.exports;ma=d.asm.Ka;ta();ua=d.asm.ib;wa.unshift(d.asm.La);K--;d.monitorRunDependencies&&d.monitorRunDependencies(K);0==K&&(null!==Aa&&(clearInterval(Aa),Aa=null),L&&(f=L,L=null,f()))}function b(f){a(f.instance)}function c(f){return Ea().then(function(h){return WebAssembly.instantiate(h,e)}).then(function(h){return h}).then(f,function(h){z(\"failed to asynchronously prepare wasm: \"+h);B(h)})}var e={a:Jb};K++;d.monitorRunDependencies&&d.monitorRunDependencies(K);if(d.instantiateWasm)try{return d.instantiateWasm(e,\r\na)}catch(f){return z(\"Module.instantiateWasm callback failed with error: \"+f),!1}(function(){return A||\"function\"!=typeof WebAssembly.instantiateStreaming||Ba()||N.startsWith(\"file://\")||p||\"function\"!=typeof fetch?c(b):fetch(N,{credentials:\"same-origin\"}).then(function(f){return WebAssembly.instantiateStreaming(f,e).then(b,function(h){z(\"wasm streaming compile failed: \"+h);z(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\r\nd.___wasm_call_ctors=function(){return(d.___wasm_call_ctors=d.asm.La).apply(null,arguments)};d._OrtInit=function(){return(d._OrtInit=d.asm.Ma).apply(null,arguments)};d._OrtCreateSessionOptions=function(){return(d._OrtCreateSessionOptions=d.asm.Na).apply(null,arguments)};d._OrtAppendExecutionProvider=function(){return(d._OrtAppendExecutionProvider=d.asm.Oa).apply(null,arguments)};d._OrtAddSessionConfigEntry=function(){return(d._OrtAddSessionConfigEntry=d.asm.Pa).apply(null,arguments)};\r\nd._OrtReleaseSessionOptions=function(){return(d._OrtReleaseSessionOptions=d.asm.Qa).apply(null,arguments)};d._OrtCreateSession=function(){return(d._OrtCreateSession=d.asm.Ra).apply(null,arguments)};d._OrtReleaseSession=function(){return(d._OrtReleaseSession=d.asm.Sa).apply(null,arguments)};d._OrtGetInputCount=function(){return(d._OrtGetInputCount=d.asm.Ta).apply(null,arguments)};d._OrtGetOutputCount=function(){return(d._OrtGetOutputCount=d.asm.Ua).apply(null,arguments)};\r\nd._OrtGetInputName=function(){return(d._OrtGetInputName=d.asm.Va).apply(null,arguments)};d._OrtGetOutputName=function(){return(d._OrtGetOutputName=d.asm.Wa).apply(null,arguments)};d._OrtFree=function(){return(d._OrtFree=d.asm.Xa).apply(null,arguments)};d._OrtCreateTensor=function(){return(d._OrtCreateTensor=d.asm.Ya).apply(null,arguments)};d._OrtGetTensorData=function(){return(d._OrtGetTensorData=d.asm.Za).apply(null,arguments)};\r\nd._OrtReleaseTensor=function(){return(d._OrtReleaseTensor=d.asm._a).apply(null,arguments)};d._OrtCreateRunOptions=function(){return(d._OrtCreateRunOptions=d.asm.$a).apply(null,arguments)};d._OrtAddRunConfigEntry=function(){return(d._OrtAddRunConfigEntry=d.asm.ab).apply(null,arguments)};d._OrtReleaseRunOptions=function(){return(d._OrtReleaseRunOptions=d.asm.bb).apply(null,arguments)};d._OrtRun=function(){return(d._OrtRun=d.asm.cb).apply(null,arguments)};\r\nd._OrtEndProfiling=function(){return(d._OrtEndProfiling=d.asm.db).apply(null,arguments)};\r\nvar Ja=d._malloc=function(){return(Ja=d._malloc=d.asm.eb).apply(null,arguments)},Ha=d._free=function(){return(Ha=d._free=d.asm.fb).apply(null,arguments)},Za=d._fflush=function(){return(Za=d._fflush=d.asm.gb).apply(null,arguments)},Ya=d.___funcs_on_exit=function(){return(Ya=d.___funcs_on_exit=d.asm.hb).apply(null,arguments)},X=d._setThrew=function(){return(X=d._setThrew=d.asm.jb).apply(null,arguments)},Y=d.stackSave=function(){return(Y=d.stackSave=d.asm.kb).apply(null,arguments)},Z=d.stackRestore=\r\nfunction(){return(Z=d.stackRestore=d.asm.lb).apply(null,arguments)},Kb=d.stackAlloc=function(){return(Kb=d.stackAlloc=d.asm.mb).apply(null,arguments)},Xa=d.___cxa_can_catch=function(){return(Xa=d.___cxa_can_catch=d.asm.nb).apply(null,arguments)},Fa=d.___cxa_is_pointer_type=function(){return(Fa=d.___cxa_is_pointer_type=d.asm.ob).apply(null,arguments)},Lb=d.dynCall_j=function(){return(Lb=d.dynCall_j=d.asm.pb).apply(null,arguments)},Mb=d.dynCall_iiiiij=function(){return(Mb=d.dynCall_iiiiij=d.asm.qb).apply(null,\r\narguments)},Nb=d.dynCall_jii=function(){return(Nb=d.dynCall_jii=d.asm.rb).apply(null,arguments)},Ob=d.dynCall_viiiiij=function(){return(Ob=d.dynCall_viiiiij=d.asm.sb).apply(null,arguments)},Pb=d.dynCall_vjji=function(){return(Pb=d.dynCall_vjji=d.asm.tb).apply(null,arguments)},Qb=d.dynCall_viiijjjii=function(){return(Qb=d.dynCall_viiijjjii=d.asm.ub).apply(null,arguments)},Rb=d.dynCall_iij=function(){return(Rb=d.dynCall_iij=d.asm.vb).apply(null,arguments)},Sb=d.dynCall_ji=function(){return(Sb=d.dynCall_ji=\r\nd.asm.wb).apply(null,arguments)},Tb=d.dynCall_iiiiiij=function(){return(Tb=d.dynCall_iiiiiij=d.asm.xb).apply(null,arguments)},Ub=d.dynCall_iiij=function(){return(Ub=d.dynCall_iiij=d.asm.yb).apply(null,arguments)};function cb(a,b){var c=Y();try{return U(a)(b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}function vb(a,b){var c=Y();try{U(a)(b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}function wb(a,b,c){var e=Y();try{U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}\r\nfunction fb(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function gb(a,b,c,e){var f=Y();try{return U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function kb(a,b,c,e,f,h,k){var l=Y();try{return U(a)(b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}function ub(a){var b=Y();try{U(a)()}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function jb(a,b,c,e,f,h){var k=Y();try{return U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}\r\nfunction hb(a,b,c,e,f){var h=Y();try{return U(a)(b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function yb(a,b,c,e){var f=Y();try{U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function Ab(a,b,c,e,f,h){var k=Y();try{U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}function zb(a,b,c,e,f){var h=Y();try{U(a)(b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function Bb(a,b,c,e,f,h,k){var l=Y();try{U(a)(b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}\r\nfunction Cb(a,b,c,e,f,h,k,l){var n=Y();try{U(a)(b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function eb(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function db(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function Db(a,b,c,e,f,h,k,l,n){var t=Y();try{U(a)(b,c,e,f,h,k,l,n)}catch(x){Z(t);if(x!==x+0)throw x;X(1,0)}}function ib(a,b,c,e,f,h){var k=Y();try{return U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}\r\nfunction lb(a,b,c,e,f,h,k,l){var n=Y();try{return U(a)(b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function mb(a,b,c,e,f,h,k,l,n,t,x,E){var C=Y();try{return U(a)(b,c,e,f,h,k,l,n,t,x,E)}catch(g){Z(C);if(g!==g+0)throw g;X(1,0)}}function Eb(a,b,c,e,f,h,k,l,n,t,x){var E=Y();try{U(a)(b,c,e,f,h,k,l,n,t,x)}catch(C){Z(E);if(C!==C+0)throw C;X(1,0)}}function Fb(a,b,c,e,f,h,k,l,n,t,x,E,C,g,u,w){var F=Y();try{U(a)(b,c,e,f,h,k,l,n,t,x,E,C,g,u,w)}catch(M){Z(F);if(M!==M+0)throw M;X(1,0)}}\r\nfunction bb(a){var b=Y();try{return U(a)()}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function ab(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function $a(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function xb(a,b,c,e){var f=Y();try{U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function Gb(a,b,c,e,f,h,k,l){var n=Y();try{Ob(a,b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}\r\nfunction Ib(a,b,c,e,f,h){var k=Y();try{Pb(a,b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}function Hb(a,b,c,e,f,h,k,l,n,t,x,E){var C=Y();try{Qb(a,b,c,e,f,h,k,l,n,t,x,E)}catch(g){Z(C);if(g!==g+0)throw g;X(1,0)}}function qb(a,b,c,e){var f=Y();try{return Rb(a,b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function sb(a,b){var c=Y();try{return Sb(a,b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}\r\nfunction nb(a,b,c,e,f,h,k,l){var n=Y();try{return Tb(a,b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function rb(a){var b=Y();try{return Lb(a)}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function ob(a,b,c,e,f,h,k){var l=Y();try{return Mb(a,b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}function pb(a,b,c,e,f){var h=Y();try{return Ub(a,b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function tb(a,b,c){var e=Y();try{return Nb(a,b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}\r\nd.UTF8ToString=pa;d.stringToUTF8=function(a,b,c){return qa(a,G,b,c)};d.lengthBytesUTF8=ra;d.stackSave=Y;d.stackRestore=Z;d.stackAlloc=Kb;var Vb;L=function Wb(){Vb||Xb();Vb||(L=Wb)};\r\nfunction Xb(){function a(){if(!Vb&&(Vb=!0,d.calledRun=!0,!D)){O(wa);aa(d);if(d.onRuntimeInitialized)d.onRuntimeInitialized();if(d.postRun)for(\"function\"==typeof d.postRun&&(d.postRun=[d.postRun]);d.postRun.length;){var b=d.postRun.shift();ya.unshift(b)}O(ya)}}if(!(0<K)){if(d.preRun)for(\"function\"==typeof d.preRun&&(d.preRun=[d.preRun]);d.preRun.length;)za();O(va);0<K||(d.setStatus?(d.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){d.setStatus(\"\")},1);a()},1)):a())}}\r\nif(d.preInit)for(\"function\"==typeof d.preInit&&(d.preInit=[d.preInit]);0<d.preInit.length;)d.preInit.pop()();Xb();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.14.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m=\\\"./this.program\\\",g=(t,e)=>{throw e},v=\\\"object\\\"==typeof window,w=\\\"function\\\"==typeof importScripts,_=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+\\\"/\\\":\\\"//\\\",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:\\\"utf8\\\")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(t){if(!(t instanceof ct))throw t})),process.on(\\\"unhandledRejection\\\",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x(\\\"exiting due to exception: \\\"+e),process.exit(t)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{e=n(925)}catch(t){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",_||(l=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.responseType=\\\"arraybuffer\\\",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",t,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+\\\"\\\\n\\\"),E=t=>h.writeSync(2,t+\\\"\\\\n\\\"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&at(\\\"no native wasm support detected\\\");var j,k,D,P,U,F,I,W,H=!1,L=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r=\\\"\\\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):\\\"\\\"}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),_&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:\\\"onAbort\\\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\\\"Aborted(\\\"+t+\\\")\\\"),H=!0,t=new WebAssembly.RuntimeError(t+\\\". Build with -sASSERTIONS for more info.\\\"),s(t),t}function it(){return tt.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(t){at(t)}}tt=\\\"ort-wasm-threaded.wasm\\\",it()||(tt=S(tt));var ut={};function ct(t){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+t+\\\")\\\",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:\\\"run\\\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),\\\"unwind\\\";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?zt(n.queue):\\\"spawnThread\\\"===r?lt(n):\\\"cleanupThread\\\"===r?st(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):\\\"cancelThread\\\"===r?ht.Vb[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):\\\"print\\\"===r?C(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?t.postMessage(n):\\\"onAbort\\\"===r?u.onAbort&&u.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);ht.Bc=void 0},t.onerror=t=>{throw x(\\\"worker sent an error! \\\"+t.filename+\\\":\\\"+t.lineno+\\\": \\\"+t.message),t},_&&(t.on(\\\"message\\\",(function(e){t.onmessage({data:e})})),t.on(\\\"error\\\",(function(e){t.onerror(e)})),t.on(\\\"detachedExit\\\",(function(){}))),t.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S(\\\"ort-wasm-threaded.worker.js\\\");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||\\\"unwind\\\"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc=\\\"spawnThread\\\",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\\\"GMT\\\"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+\\\"=\\\"+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t=\\\"number\\\"==typeof t?t.toString():t||\\\"\\\";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,\\\"0\\\")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):\\\"\\\"},r=Y(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var h=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(t){return h[t.Tb].substring(0,3)},\\\"%A\\\":function(t){return h[t.Tb]},\\\"%b\\\":function(t){return d[t.ec].substring(0,3)},\\\"%B\\\":function(t){return d[t.ec]},\\\"%C\\\":function(t){return u((t.Xb+1900)/100|0,2)},\\\"%d\\\":function(t){return u(t.jc,2)},\\\"%e\\\":function(t){return o(t.jc,2,\\\" \\\")},\\\"%g\\\":function(t){return l(t).toString().substring(2)},\\\"%G\\\":function(t){return l(t)},\\\"%H\\\":function(t){return u(t.dc,2)},\\\"%I\\\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},\\\"%j\\\":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},\\\"%m\\\":function(t){return u(t.ec+1,2)},\\\"%M\\\":function(t){return u(t.Kc,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(t){return 0<=t.dc&&12>t.dc?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(t){return u(t.Lc,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(t){return t.Tb||7},\\\"%U\\\":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},\\\"%V\\\":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},\\\"%w\\\":function(t){return t.Tb},\\\"%W\\\":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\\\"%y\\\":function(t){return(t.Xb+1900).toString().substring(2)},\\\"%Y\\\":function(t){return t.Xb+1900},\\\"%z\\\":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(t/60*100+t%60)).slice(-4)},\\\"%Z\\\":function(t){return t.Mc},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x(\\\"Unexpected exception thrown, this is not properly supported - aborting\\\"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at(\\\"no exception to throw\\\");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:\\\"cleanupThread\\\",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Ua:function(){at(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at(\\\"\\\")},U:function(){if(!_&&!w){var t=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t=\\\"warning: \\\"+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw\\\"unwind\\\"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error(\\\"Cannot find module 'crypto'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at(\\\"randomDevice\\\")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if(\\\"function\\\"==typeof fetch&&!tt.startsWith(\\\"file://\\\"))return fetch(tt,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+tt+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\\\"failed to asynchronously prepare wasm: \\\"+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+t),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith(\\\"file://\\\")||_||\\\"function\\\"!=typeof fetch?n(e):fetch(tt,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x(\\\"wasm streaming compile failed: \\\"+t),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:\\\"loaded\\\"});else{if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p=\\\"./this.program\\\",h=(t,e)=>{throw e},d=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,b=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,m=\\\"\\\";b?(m=y?n(908).dirname(m)+\\\"/\\\":\\\"//\\\",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:\\\"utf8\\\")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(t){if(!(t instanceof J))throw t})),process.on(\\\"unhandledRejection\\\",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w(\\\"exiting due to exception: \\\"+e),process.exit(t)},e.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||y)&&(y?m=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf(\\\"blob:\\\")?m.substr(0,m.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",i=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.responseType=\\\"arraybuffer\\\",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",t,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&V(\\\"no native wasm support detected\\\");var O,A,S,T,E,M,C=!1,x=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r=\\\"\\\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):\\\"\\\"}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t=\\\"Aborted(\\\"+t+\\\")\\\"),C=!0,t=new WebAssembly.RuntimeError(t+\\\". Build with -sASSERTIONS for more info.\\\"),a(t),t}function $(){return Y.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(Y=\\\"ort-wasm.wasm\\\",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(t){V(t)}}function J(t){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+t+\\\")\\\",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+\\\"=\\\"+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t=\\\"number\\\"==typeof t?t.toString():t||\\\"\\\";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,\\\"0\\\")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):\\\"\\\"},n=j(n),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),s[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":function(t){return f[t.Ab].substring(0,3)},\\\"%A\\\":function(t){return f[t.Ab]},\\\"%b\\\":function(t){return p[t.Hb].substring(0,3)},\\\"%B\\\":function(t){return p[t.Hb]},\\\"%C\\\":function(t){return i((t.Cb+1900)/100|0,2)},\\\"%d\\\":function(t){return i(t.Kb,2)},\\\"%e\\\":function(t){return a(t.Kb,2,\\\" \\\")},\\\"%g\\\":function(t){return c(t).toString().substring(2)},\\\"%G\\\":function(t){return c(t)},\\\"%H\\\":function(t){return i(t.Gb,2)},\\\"%I\\\":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},\\\"%j\\\":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},\\\"%m\\\":function(t){return i(t.Hb+1,2)},\\\"%M\\\":function(t){return i(t.Zb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(t){return 0<=t.Gb&&12>t.Gb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(t){return i(t.$b,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(t){return t.Ab||7},\\\"%U\\\":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},\\\"%V\\\":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},\\\"%w\\\":function(t){return t.Ab},\\\"%W\\\":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},\\\"%y\\\":function(t){return(t.Cb+1900).toString().substring(2)},\\\"%Y\\\":function(t){return t.Cb+1900},\\\"%z\\\":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(t/60*100+t%60)).slice(-4)},\\\"%Z\\\":function(t){return t.ac},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w(\\\"Unexpected exception thrown, this is not properly supported - aborting\\\"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V(\\\"no exception to throw\\\");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Ia:function(){V(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V(\\\"\\\")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error(\\\"Cannot find module 'crypto'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V(\\\"randomDevice\\\")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if(\\\"function\\\"==typeof fetch&&!Y.startsWith(\\\"file://\\\"))return fetch(Y,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+Y+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w(\\\"failed to asynchronously prepare wasm: \\\"+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w(\\\"Module.instantiateWasm callback failed with error: \\\"+t),!1}(g||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith(\\\"file://\\\")||b||\\\"function\\\"!=typeof fetch?r(n):fetch(Y,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w(\\\"wasm streaming compile failed: \\\"+t),w(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for(\\\"function\\\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for(\\\"function\\\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){e.setStatus(\\\"\\\")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for(\\\"function\\\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if(\\\"object\\\"==typeof t&&null!==t){if(r.has(t))throw new Error(\\\"Circular reference in options\\\");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if(\\\"object\\\"==typeof i)(0,e.iterateExtraOptions)(i,o+\\\".\\\",r,a);else if(\\\"string\\\"==typeof i||\\\"number\\\"==typeof i)a(o,i.toString());else{if(\\\"boolean\\\"!=typeof i)throw new Error(\\\"Can't handle extra config type: \\\"+typeof i);a(o,i?\\\"1\\\":\\\"0\\\")}}))}},586:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\\\"\\\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can't set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly=\\\"1\\\")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel=\\\"all\\\");const c=(t=>{switch(t){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode=\\\"sequential\\\");const s=(t=>{switch(t){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e=\\\"string\\\"==typeof r?r:r.name;switch(e){case\\\"xnnpack\\\":e=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can't append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\\\"\\\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can't set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error(\\\"Can't get an input name\\\");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error(\\\"Can't get an output name\\\");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error(\\\"invalid session id\\\");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if(\\\"string\\\"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),\\\"string\\\"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),\\\"string\\\"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!(\\\"get\\\"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\\\"default\\\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":t?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y=\\\"string\\\"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g=\\\"object\\\"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=u.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:\\\"text/javascript\\\"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{\\\"use strict\\\";t.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(t){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(t=>postMessage({type:\\\"init-wasm\\\",err:t})));break;case\\\"init-ort\\\":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:\\\"init-ort\\\"})}catch(t){postMessage({type:\\\"init-ort\\\",err:t})}break;case\\\"create_allocate\\\":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:\\\"create_allocate\\\",out:r})}catch(t){postMessage({type:\\\"create_allocate\\\",err:t})}break;case\\\"create_finalize\\\":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(t){postMessage({type:\\\"create_finalize\\\",err:t})}break;case\\\"create\\\":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:\\\"create\\\",out:a})}catch(t){postMessage({type:\\\"create\\\",err:t})}break;case\\\"release\\\":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:\\\"release\\\"})}catch(t){postMessage({type:\\\"release\\\",err:t})}break;case\\\"run\\\":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:\\\"run\\\",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:\\\"run\\\",err:t})}break;case\\\"end-profiling\\\":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:\\\"end-profiling\\\"})}catch(t){postMessage({type:\\\"end-profiling\\\",err:t})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","logLevelInternal","logLevel","value","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","static","buffer","options","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","offset","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","String","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","naturalHeight","naturalWidth","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toImageData","_a","_b","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","_scriptDir","t","currentScript","n","E","D","z","j","F","r","U","Y","a","I","u","o","c","ready","f","s","l","p","h","m","d","assign","y","b","g","window","_","importScripts","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","T","O","locateFile","__dirname","normalize","readFileSync","readFile","argv","replace","slice","on","ot","J","exitCode","x","exit","inspect","console","error","Worker","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","status","onerror","performance","S","log","bind","A","warn","writeSync","M","C","print","printErr","thisProgram","quit","wasmBinary","R","noExitRuntime","WebAssembly","rt","k","W","P","TextDecoder","H","decode","subarray","fromCharCode","q","B","charCodeAt","G","HEAP8","HEAP16","HEAP32","HEAPU8","HEAPU16","HEAPU32","HEAPF32","HEAPF64","N","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","V","L","X","Z","$","Q","preRun","shift","unshift","K","tt","nt","et","postMessage","cmd","arg","onAbort","RuntimeError","it","startsWith","at","ut","message","ct","pt","Vb","mc","ft","Cc","ac","Ub","start_routine","Ic","zc","pthread_ptr","$b","time","now","Nc","loaded","st","Vt","oc","onExit","lt","dt","bn","ht","yn","en","rn","Yb","qc","fc","Ec","Pc","receiveObjectTransfer","Gc","threadInitTLS","pc","setExitStatus","nc","values","terminate","Tn","forEach","Fc","onmessage","Bc","targetThread","hn","Qc","transferList","Ht","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","yc","pop","mt","Mn","Cn","PThread","establishStackSpace","An","yt","bt","invokeEntryPoint","On","gt","_t","vt","wt","Tt","Ot","Zb","Sb","xc","bc","wc","Dc","rc","hc","uc","ic","kc","cc","sc","Atomics","add","Hc","sub","tc","vc","En","St","dn","At","Mt","Oc","Ct","xt","Rt","Et","kt","Dt","jt","Ft","Ut","Yt","It","Wt","Pt","store","wn","compareExchange","qt","Bt","Gt","zt","mn","Nt","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","arguments","xn","vn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Lt","Xt","Zt","$t","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Jt","Qt","Kt","tn","nn","an","un","cn","fn","sn","toString","getMonth","getDate","getDay","Wb","Xb","getTime","setDate","setMonth","setFullYear","Lc","Kc","dc","jc","ec","Tb","Rc","Jc","Mc","RegExp","split","substring","floor","abs","includes","ln","pn","ma","Sn","prototype","Rn","pa","Fa","gn","xa","Ma","ua","wa","oa","Ka","Ca","Ja","va","sa","La","ta","Ta","Ua","ya","Oa","za","setTimeout","Ea","Pa","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","Qa","getSeconds","getMinutes","getHours","min","Ra","setTime","Aa","Ba","Sa","Ac","ra","Ia","copyWithin","hardwareConcurrency","Da","apply","qa","grow","Na","Ga","Ha","ga","na","lc","crypto","getRandomValues","randomBytes","ia","ja","aa","Pn","Dn","Hn","ca","In","kn","ba","Wn","jn","ha","ka","fa","Fn","da","Yn","ea","Un","la","asm","sb","ub","Va","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","Wa","_OrtCreateSessionOptions","Xa","_OrtAppendExecutionProvider","Ya","_OrtAddSessionConfigEntry","Za","_OrtReleaseSessionOptions","_OrtCreateSession","$a","_OrtReleaseSession","ab","_OrtGetInputCount","bb","_OrtGetOutputCount","cb","_OrtGetInputName","db","_OrtGetOutputName","eb","_OrtFree","fb","_OrtCreateTensor","gb","_OrtGetTensorData","hb","_OrtReleaseTensor","ib","_OrtCreateRunOptions","jb","_OrtAddRunConfigEntry","kb","_OrtReleaseRunOptions","lb","_OrtRun","mb","_OrtEndProfiling","nb","_pthread_self","ob","_malloc","pb","_free","qb","_fflush","rb","__emscripten_tls_init","___funcs_on_exit","tb","__emscripten_thread_init","vb","__emscripten_thread_crashed","wb","_n","_emscripten_run_in_main_runtime_thread_js","xb","__emscripten_proxy_execute_task_queue","yb","__emscripten_thread_free_data","zb","__emscripten_thread_exit","Ab","_setThrew","Bb","_emscripten_stack_set_limits","Cb","stackSave","Db","stackRestore","Eb","stackAlloc","Fb","___cxa_can_catch","Gb","___cxa_is_pointer_type","Hb","dynCall_j","Ib","dynCall_iiiiij","Jb","dynCall_jii","Kb","dynCall_viiiiij","Lb","dynCall_vjji","Mb","dynCall_viiijjjii","Nb","dynCall_iij","Ob","dynCall_ji","Pb","dynCall_iiiiiij","Qb","dynCall_iiij","Rb","qn","calledRun","onRuntimeInitialized","postRun","setStatus","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","ctx","params","index","pending","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","SIZE","MAX","slab","utf8","len","read","write","c1","c2","__esModule","Guid","guid","EMPTY","isGuid","validator","create","gen","createEmpty","parse","raw","count","out","random","equals","other","isEmpty","toJSON","Long","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","radixToPower","result","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","finish","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","OnnxruntimeWebAssemblySessionHandler","onnxjsBackend","wasmBackend","AttributeWithCacheKeyImpl","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","isBackend","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","graphInputTypes","graphInputDims","_model","promisify","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","path","getLogLevel","modelData","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}